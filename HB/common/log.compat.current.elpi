/*        Hierarchy Builder: algebraic hierarchies made easy
    This software is released under the terms of the MIT license              */

% implementation of logging and vernac printing

with-logging P :- (get-option "elpi.hb.log" _, NICE = tt ; get-option "elpi.hb.log.raw" _, NICE = ff), !,
  get-option "elpi.loc" Loc,
  rex_split "," Loc [FILE|_],
  FILENAME is FILE ^ ".hb",
  open_append FILENAME OC1,
  std.string.concat "\n" ["","HIERARCHY BUILDER PATCH v1",Loc,""] PATCH1,
  output OC1 PATCH1,
  close_out OC1,
  log.private.logger L NICE => P,
  log.private.logger-close L,
  std.intersperse coq.pp.spc L PP,
  coq.pp->string (coq.pp.box (coq.pp.v 0) PP) S,
  open_append FILENAME OC2,
  output OC2 S,
  close_out OC2.
with-logging P :- (get-option "log" tt, NICE = tt ; get-option "log.raw" tt, NICE = ff), !,
  log.private.logger L NICE => P,
  log.private.logger-close L,
  std.intersperse coq.pp.spc L PP,
  coq.pp->string (coq.pp.box (coq.pp.v 0) PP) S,
  coq.say "(* \n" S "\n*)".
with-logging P :- P.

log.private.log-vernac V :- log.private.logger L Nice, !,
  if (Nice = tt) (PPALL = []) (PPALL = [@ppall!]),
  log.private.logger-extend L {PPALL => log.private.coq.vernac->pp [V]}.
log.private.log-vernac _.

% The main entry point to print vernacular commands is coq.vernac->pp

shorten log.private.coq.vernac.{ begin-module , end-module , begin-section, end-section }.
shorten log.private.coq.vernac.{ begin-module-type , end-module-type }.
shorten log.private.coq.vernac.{ import-module , export-module }.
shorten log.private.coq.vernac.{ definition , variable , comment , check }.
shorten log.private.coq.{ vernac.inductive , vernac.implicit , vernac.parameter }.
shorten log.private.coq.vernac.{ canonical , abbreviation , notation , coercion }.
shorten log.private.{ coq.vernac }.
shorten coq.pp.{ box , h , spc , v , str , hv , hov, glue, brk }.

namespace log.private {

pred logger o:list coq.pp, o:bool.

pred logger-extend i:list coq.pp, i:coq.pp.
logger-extend [] _ :- coq.error "HB: logger was closed".
logger-extend (uvar as X) V :- X = [V|FRESH_].
logger-extend [_|XS] V :- logger-extend XS V.

pred logger-close i:list coq.pp.
logger-close (uvar as X) :- X = [].
logger-close [_|XS] :- logger-close XS.

pred coq.vernac->pp i:list coq.vernac, o:coq.pp.
coq.vernac->pp L (box (v 0) L2) :-
  std.map L coq.vernac->pp1 L1,
  std.intersperse spc L1 L2.

pred coq.vernac->pp1 i:coq.vernac, o:coq.pp.
coq.vernac->pp1 (begin-module Name none) PP :-
  PP = box h [str "Module ", str Name, str "."].
coq.vernac->pp1 (begin-module Name (some TyName)) PP :-
  PP = box h [str "Module ", str Name, str " : ", str TyName, str "."].
coq.vernac->pp1 (end-module Name) PP :-
  PP = box h [str "End ", str Name, str "."].
coq.vernac->pp1 (begin-module-type Name) PP :-
  PP = box h [str "Module Type ", str Name, str "."].
coq.vernac->pp1 (end-module-type Name) PP :-
  PP = box h [str "End ", str Name, str "."].
coq.vernac->pp1 (begin-section Name) PP :-
  PP = box h [str "Section ", str Name, str "."].
coq.vernac->pp1 (end-section Name) PP :-
  PP = box h [str "End ", str Name, str "."].
coq.vernac->pp1 (definition Name none Body) PP :-
  PP = box (hv 2) [str "Definition ", str Name, str " :=", spc, B, str "."],
  coq.term->pp Body B.
coq.vernac->pp1 (definition Name (some Ty) Body) PP :-
  PP = box (hv 2) [str "Definition ", str Name, str " : ", T, str " :=", spc, B, str "."],
  coq.term->pp Ty T,
  coq.term->pp Body B.
coq.vernac->pp1 (variable Name Ty) (box (hv 2) [box h [str "Variable ", str Name, str " :"], spc, TY, str "."]) :-
  coq.term->pp Ty TY.
coq.vernac->pp1 (vernac.parameter Name Ty) (box (hv 2) [box h [str "Parameter ", str Name, str " :"], spc, TY, str "."]) :-
  coq.term->pp Ty TY.
coq.vernac->pp1 (import-module Name) (box h [str "Import ", str Name, str "."]).
coq.vernac->pp1 (export-module Name) (box h [str "Export ", str Name, str "."]).
coq.vernac->pp1 (notation KM NParams Term) (box (hv 2) [box h [str "Notation \"'",str KM,str"' "|StrParams], str "\" :=", spc, B, str " (at level 1)."]) :- !,
  coq.vernac->ppabbrterm NParams Term StrParams B.
coq.vernac->pp1 (abbreviation Name NParams Term) (box (hv 2) [box h [str "Notation ",str Name|StrParams], str " :=", spc, B, str "."]) :-
  coq.vernac->ppabbrterm NParams Term StrParams B.
coq.vernac->pp1 (canonical Name Local) (box h [Locality, str "Canonical ", str Name, str "."]) :-
  local->locality Local Locality.
coq.vernac->pp1 (coercion Name SRC TGT) (box h [str "Coercion ", str Name, str " : ", str S, str " >-> ", str T, str "."]) :-
  coq.gref->path SRC SP, std.string.concat "." {std.take-last 3 SP} S,
  if2 (TGT = sortclass) (T = "Sortclass")
      (TGT = funclass)  (T = "Funclass")
                        (TGT = grefclass GR, coq.gref->path GR GRP, std.string.concat "." {std.take-last 3 GRP} T).
coq.vernac->pp1 (vernac.inductive I) PP :-
  coq.vernac->ppinductive I [] PP.
coq.vernac->pp1 (vernac.implicit Local Name [[]]) (box h [Locality, str "Arguments ", str Name, str " : clear implicits."]) :- local->locality Local Locality.
coq.vernac->pp1 (vernac.implicit Local Name [L]) (box h [Locality, str "Arguments ", str Name, spc, glue PP, str "."]) :-
  local->locality Local Locality,
  std.map L coq.vernac->ppimparg PP1,
  std.intersperse spc PP1 PP.
coq.vernac->pp1 (comment A) (box (hov 2) [str"(*", str S, str"*)"]) :-
  std.any->string A S.
coq.vernac->pp1 (check T Fail) (box (hov 2) [Failure, str"Check", spc, PPT, str"."]) :-
  @holes! => coq.term->pp T PPT,
  fail->failure Fail Failure.

pred local->locality i:bool, o:coq.pp.
local->locality tt (str "Local ").
local->locality ff (str "Global ").

pred fail->failure i:bool, o:coq.pp.
fail->failure tt (str "Fail ").
fail->failure ff (str "").

pred coq.vernac->ppimparg i:implicit_kind, o:coq.pp.
coq.vernac->ppimparg explicit (str "_").
coq.vernac->ppimparg maximal  (str "{_}").
coq.vernac->ppimparg implicit (str "[_]").

pred coq.vernac->ppinductive i:indt-decl, i:list (pair implicit_kind term), o:coq.pp.
coq.vernac->ppinductive (parameter ID IMPL TY I) Acc R :-
  @pi-parameter ID TY p\ coq.vernac->ppinductive (I p) [pr IMPL p|Acc] R.
coq.vernac->ppinductive (record ID SORT KID RD) ParamsRev (box (v 0) [Hack1, PP, Hack2]) :-
  PP = (box (hov 0) [
         box (hov 0) [str "Record", spc, str ID, brk 1 4, glue ParamsPP,
                      str " : ", SortPP, brk 1 2, str":= ", str KID],
         brk 1 2,
         box (hv 2) [str"{", spc, glue FieldsPP, str"}"],
         str"."]),
  Hack1 = glue [str "Section ", str ID, str ".", spc,
                str "Local Unset Implicit Arguments.", spc],
  Hack2 = glue [spc, str "End ", str ID, str".", spc],
  std.rev ParamsRev Params,
  coq.vernac->ppinductiveparams Params ParamsPP,
  coq.term->pp SORT SortPP,
  coq.vernac->pprecordfields RD FieldsPP.
coq.vernac->ppinductive (inductive ID IsInd Arity Ks) ParamsRev PP :-
  PP = (box (hov 0) [
         str CO,str "Inductive", spc,
         box (hov 0) [
           str ID, brk 1 4, glue ParamsPP, ArityPP, str " :="],
         brk 0 2,
         box (hv 2) [str"  ", glue KsPp],
         str "."]),
  std.rev ParamsRev Params,
  coq.vernac->ppinductiveparams Params ParamsPP,
  std.map Params snd ParamsAsArgs,
  if (IsInd = tt) (CO = "") (CO = "Co"),
  coq.arity->pp Arity ArityPP,
  @pi-inductive ID Arity x\
    coq.mk-app x ParamsAsArgs (X x),
    coq.vernac->ppinductiveconstructor (Ks (X x)) KsPp.

pred coq.vernac->ppinductiveconstructor i:list indc-decl, o:list coq.pp.
coq.vernac->ppinductiveconstructor [] [].
coq.vernac->ppinductiveconstructor [constructor ID Arity|Ks] PP :-
  PP = [str ID,{coq.arity->pp Arity},SEP|Rest],
  if (Ks = []) (SEP = str"") (SEP = glue [brk 1 0, str "| "]),
  coq.vernac->ppinductiveconstructor Ks Rest.

pred coq.vernac->ppinductiveparams i:list (pair implicit_kind term), o:list coq.pp.
coq.vernac->ppinductiveparams [] [].
coq.vernac->ppinductiveparams [pr Imp T|Rest] PP :-
  PP = [box (hov 2) [str A,str ID,str " : ", TY,str B]|PPRest],
  decl T Name Ty, coq.name->id Name ID, coq.term->pp Ty TY,
  if2 (Imp = explicit) (A = "(", B = ")")
      (Imp = maximal)  (A = "{", B = "}")
                       (A = "[", B = "]"),
  coq.vernac->ppinductiveparams Rest PPRest.

pred coq.vernac->pprecordfields i:record-decl, o:list coq.pp. 
coq.vernac->pprecordfields end-record [].
coq.vernac->pprecordfields (field _ ID TY F) [ str ID, str " : ", TYPP, str ";", spc|FPP] :- % TODO attributes
  coq.term->pp TY TYPP,
  @pi-parameter ID TY p\ coq.vernac->pprecordfields (F p) FPP.

pred coq.vernac->ppabbrterm i:int, i:term, o:list coq.pp, o:coq.pp.
coq.vernac->ppabbrterm 0 T [] B :- !, @holes! => coq.term->pp T B.
coq.vernac->ppabbrterm N (fun _ _ F) [spc,str ID|StrParams] B :-
  ID is "X" ^ {std.any->string N},
  coq.id->name ID Name,
  M is N - 1,
  @pi-decl Name (sort prop) x\ coq.vernac->ppabbrterm M (F x) StrParams B.

}
